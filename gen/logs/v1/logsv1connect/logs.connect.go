// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: logs/v1/logs.proto

package logsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/pgulb/plasma/gen/logs/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LoggerServiceName is the fully-qualified name of the LoggerService service.
	LoggerServiceName = "logs.v1.LoggerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoggerServiceLogStreamProcedure is the fully-qualified name of the LoggerService's LogStream RPC.
	LoggerServiceLogStreamProcedure = "/logs.v1.LoggerService/LogStream"
)

// LoggerServiceClient is a client for the logs.v1.LoggerService service.
type LoggerServiceClient interface {
	LogStream(context.Context, *connect.Request[v1.LogStreamRequest]) (*connect.ServerStreamForClient[v1.LogStreamResponse], error)
}

// NewLoggerServiceClient constructs a client for the logs.v1.LoggerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoggerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LoggerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	loggerServiceMethods := v1.File_logs_v1_logs_proto.Services().ByName("LoggerService").Methods()
	return &loggerServiceClient{
		logStream: connect.NewClient[v1.LogStreamRequest, v1.LogStreamResponse](
			httpClient,
			baseURL+LoggerServiceLogStreamProcedure,
			connect.WithSchema(loggerServiceMethods.ByName("LogStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// loggerServiceClient implements LoggerServiceClient.
type loggerServiceClient struct {
	logStream *connect.Client[v1.LogStreamRequest, v1.LogStreamResponse]
}

// LogStream calls logs.v1.LoggerService.LogStream.
func (c *loggerServiceClient) LogStream(ctx context.Context, req *connect.Request[v1.LogStreamRequest]) (*connect.ServerStreamForClient[v1.LogStreamResponse], error) {
	return c.logStream.CallServerStream(ctx, req)
}

// LoggerServiceHandler is an implementation of the logs.v1.LoggerService service.
type LoggerServiceHandler interface {
	LogStream(context.Context, *connect.Request[v1.LogStreamRequest], *connect.ServerStream[v1.LogStreamResponse]) error
}

// NewLoggerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoggerServiceHandler(svc LoggerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	loggerServiceMethods := v1.File_logs_v1_logs_proto.Services().ByName("LoggerService").Methods()
	loggerServiceLogStreamHandler := connect.NewServerStreamHandler(
		LoggerServiceLogStreamProcedure,
		svc.LogStream,
		connect.WithSchema(loggerServiceMethods.ByName("LogStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/logs.v1.LoggerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoggerServiceLogStreamProcedure:
			loggerServiceLogStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoggerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoggerServiceHandler struct{}

func (UnimplementedLoggerServiceHandler) LogStream(context.Context, *connect.Request[v1.LogStreamRequest], *connect.ServerStream[v1.LogStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("logs.v1.LoggerService.LogStream is not implemented"))
}
